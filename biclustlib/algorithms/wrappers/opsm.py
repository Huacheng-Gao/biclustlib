from ._base import BicatWrapper
from os.path import dirname, join

class OrderPreservingSubMatrix(BicatWrapper):
    """Order-Preserving SubMatrix (OPSM)

    OPSM finds biclusters, each one containing rows that follow the same order after rearranging
    the bicluster columns.

    This class is a simple wrapper for part of the BicAT software (http://people.ee.ethz.ch/~sop/bicat/).

    Reference
    ---------
    Ben-Dor, A., Chor, B., Karp, R., and Yakhini, Z. (2003). Discovering local structure in gene expression
    data: the order-preserving submatrix problem. Journal of computational biology, 10(3-4), 373-384.

    Parameters
    ----------
    num_best_partial_models : int, default: 100
        Number of best partial models to maintain from one iteration to another.

    tmp_dir : str, default: '.opsm_tmp'
        Temporary directory to save the outputs generated by OPSM's jar.
    """

    def __init__(self, num_best_partial_models=100, tmp_dir='.opsm_tmp'):
        module_dir = dirname(__file__)

        exec_comm = join(module_dir, 'jar', 'opsm.jar') + \
                    ' {_data_filename}' + \
                    ' {num_best_partial_models}'

        super().__init__(exec_comm, tmp_dir=tmp_dir)

        self.num_best_partial_models = num_best_partial_models
        self._output_filename = 'out.opsm'

    def _validate_parameters(self):
        if self.num_best_partial_models <= 0:
            raise ValueError('num_best_partial_models must be > 0, got {}'.format(self.num_best_partial_models))
